import express from 'express'
import Router from 'express-promise-router'
import objectReduceByMap from 'object-reduce-by-map'

import NodegenRequest from '../interfaces/NodegenRequest'

{{ celebrateImport(operations) }}
import jwtMiddleware from '../middleware/jwtMiddleware'
import apiKeyMiddleware from '../middleware/apiKeyMiddleware'
import {{ camelCase(operation_name) }}Validators from'../validators/{{ prettifyRouteName(operation_name) }}Validators'
import {{ucFirst(operation_name)}}Domain from '../../../domains/{{ucFirst(operation_name)}}Domain'
import {{camelCase(operation_name)}}TransformOutputs from '../transformOutputs/{{operation_name}}TransformOutput'

export default function() {
  const router = Router();
  {% for op in operations -%}
    {% for key, path in op.path -%}
      {% if isValidMethod(key)%}
  /**
   * Operation ID: {{ path.operationId }}
   * {% if path.summary %}Summary: {{ path.summary }}{% endif %}
   * {% if path.description %}Description: {{ path.description }}{% endif %}
   */
  router.{{key}}(
    '{{op.subresource}}',
    {{getSecDefMiddleware(path, swagger)}} {{celebrateRoute(operation_name, path.parameters, path.operationId)}}
    async (req: any, res: express.Response) => {
      {% if not path.produces or path.produces and arrayContains('application/json', path.produces) %}
      return res.json(
        objectReduceByMap(
          await {{ucFirst(operation_name)}}Domain.{{path.operationId}}({{pathParamsToDomainParams(path, false, true, 'params')}}),
          {{camelCase(operation_name)}}TransformOutputs.{{path.operationId}}
        )
      );
      {% else %}
        return res.download(
          await {{ucFirst(operation_name)}}Domain.{{path.operationId}}({{pathParamsToDomainParams(path, false, true, 'params')}})
        );
      {% endif %}
    }
  );
      {% endif %}
    {%- endfor %}
  {%- endfor %}

  return router
}
